version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy front-end and back-end cloudformation stacks
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            success_migration=$(curl --insecure https://kvdb.io/9B6earijytWR5tL1bU197z/migration_<< parameters.workflow_id >>)
            if ((success_migrations == 1));
            then
              cd  ~/backend
              npm install
              npm run migrations:revert
            fi

  write-envvars-file:
    description: Command used for creating env file
    steps:
      - run:
          name: Add env vars to env file
          command: |
            echo "NODE_ENV=production" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env  


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification * - build-frontend",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
            npm audit fix --force --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      ## Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end unit test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      ## Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end unit test
          command: |
            cd backend
            npm install
            npm run test
    
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      ## Checkout code from git
      - checkout
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
              export BACKEND_PUBLIC_IP="http://${BACKEND_PUBLIC_IP}:3030"
              cat .circleci/ansible/inventory.txt
              
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      ## Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["16:cd:88:16:a6:7f:4f:38:eb:f3:da:15:20:ce:2d:51"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add tar
            apk add gzip
            apk add openssh-client
            apk add curl
            pip install awscli
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            echo $PWD
            cat /tmp/.circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            # echo ENVIRONMENT=production >> ".env"
            # echo NODE_ENV=production >> ".env"
            # echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            # echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            # echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            # echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            # echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            # echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            node -v
            npm -v
            npm install
            #npm audit fix --audit-level=critical --force
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/9B6earijytWR5tL1bU197z/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies Node
          command: |
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum -y install nodejs
            node -v
      - run:
          name: Install dependencies tar
          command: |
            yum -y install tar
      - run:
          name: Install dependencies gzip
          command: |
            yum -y install gzip
      - run:
          name: Set env variables
          command: |
            # your code here also added filters
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Build frontend objects
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm i
            npm run build
            npm audit fix --force --audit-level=critical
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 sync frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      ## Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      ## Checkout code from git
      ## Add ssh keys with fingerprint
      ## attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["16:cd:88:16:a6:7f:4f:38:eb:f3:da:15:20:ce:2d:51"]
      - attach_workspace:
          at: /~
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apk add --update ansible curl rsync openssh tar gzip bash nodejs npm
            pip install awscli
            aws --version
            ansible --version
      - run:
          name: Install dependencies Node
          command: |
            apk update && apk add nodejs npm
            node -v
            npm -v
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
              export BACKEND_PUBLIC_IP="http://${BACKEND_PUBLIC_IP}:3030"
              cat .circleci/ansible/inventory.txt
      - run:
          name: package backend
          command: |
            cd backend
            touch .env
            echo ENVIRONMENT=production >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm i
            npm run build
            npm run prestart:prod
            npm audit fix --force --audit-level=critical
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cd .circleci/ansible
            echo $PWD
            cat inventory.txt
            cat deploy-backend.yml
            ansible-playbook -i inventory.txt deploy-backend.yml
            
      ## Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - run:
          name: Get backend url and smoke test
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
                              --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                              --query 'Reservations[*].Instances[*].PublicIpAddress' \
                              --output text)
            echo "${BACKEND_IP}"
            if curl "http://${BACKEND_IP}:3030/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      #- smoke-test:
          #requires: [deploy-backend, deploy-frontend]
            
      
