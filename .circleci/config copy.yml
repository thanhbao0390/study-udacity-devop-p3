version: 2.1

orbs: 
  slack: circleci/slack@4.10.1
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
            exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      ## Docker image here
      - image: circleci/node:13.8.0
    steps:
      ## Checkout code from git
      ## Restore from cache
      ## Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end unit test
          command: |
            cd frontend
            npm install
            npm run test
      - notify_on_failure
                
  test-backend:
    docker:
      ## Docker image here
      - image: circleci/node:13.8.0
    steps:
      ## Checkout code from git
      ## Restore from cache
      ## Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end unit test
          command: |
            cd backend
            npm install
            npm run test
      - notify_on_failure
            
  scan-frontend:
    docker:
      ## Docker image here
      - image: circleci/node:13.8.0
    steps:
      ## Checkout code from git
      ## Restore from cache
      ## Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=crtical
            # npm audit fix --audit-level=critical --force
            # npm audit fix --force
            # npm audit --audit-level=crtical
      - notify_on_failure

  scan-backend:
    docker:
      ## Docker image here
      - image: circleci/node:13.8.0
    steps:
      ## Checkout code from git
      ## Restore from cache
      ## Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force --audit-level=crtical
            npm audit fix --force --audit-level=crtical
            # npm audit --audit-level=crtical
      - notify_on_failure

  deploy-infrastructure:
    docker:
      ## Docker image here that supports AWS CLI
      - image: cimg/base:stable
    steps:
      ## Checkout code from git
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      ## Here's where you will add some code to rollback on failure     
      - destroy-environment 

  configure-infrastructure:
    docker:
      ## Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      ## Checkout code from git
      ## Add ssh keys with fingerprint
      ## attach workspace
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["65:c5:83:b1:1e:23:d8:ba:ae:87:99:18:74:90:19:6c"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update ansible
            exit 1
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
            exit 1
      ## Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      ## Docker image here that supports AWS CLI
      - image: cimg/base:stable
    steps:
      ## Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo API_URL="http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      ## Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations
                    
  deploy-backend:
    docker:
      ## Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      ## Checkout code from git
      ## Add ssh keys with fingerprint
      ## attach workspace
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["65:c5:83:b1:1e:23:d8:ba:ae:87:99:18:74:90:19:6c"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: package backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      ## Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
      ## Lightweight Docker image
      - image: cimg/base:stable 
    steps:
      ## Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            echo $BACKEND_PUBLIC_IP
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"
            echo ${FRONTEND_WEBSITE}
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      ## Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      ## Docker image here that supports AWS CLI
      - image: cimg/base:stable
    steps:
      ## Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            echo "Old workflow ID: ${OLD_WORKFLOW_ID}"
            curl http://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople
      ## Here's where you will add some code to rollback on failure 
      - destroy-environment
      - revert-migrations

cleanup:
    docker:
      ## Docker image here
      - image: cimg/base:stable
    steps:
      ## Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Get old stack workflow id
          command: |
            export STAKS=($(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filters CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            export STACKS=[] #put the list of stacks here
            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
            
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]